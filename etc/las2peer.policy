// This is the policy file used for las2peer sandboxing.
// If you want a service to have access to the file system or
// open network ports add the respective rights below.

// example: This entry gives read and write access to a local directory called 'localdir'
//     in your LAS2peer installation directory.
//grant {
//    permission java.io.FilePermission "localdir", "read, write"; // the directory itself
//    permission java.io.FilePermission "localdir${/}-", "read, write"; // all files and subdirectories inside
//};

// las2peer related files
grant {
    // las2peer file read permissions
    permission java.io.FilePermission "etc", "read";
    permission java.io.FilePermission "etc${/}-", "read";
    permission java.io.FilePermission "config", "read";
    permission java.io.FilePermission "config${/}-", "read";
    permission java.io.FilePermission "properties", "read";
    permission java.io.FilePermission "properties${/}-", "read";
    permission java.io.FilePermission "lib", "read";
    permission java.io.FilePermission "lib${/}-", "read";
    permission java.io.FilePermission "service", "read";
    permission java.io.FilePermission "service${/}-", "read";

    // las2peer file write permissions
    permission java.io.FilePermission "log", "read, write";
    permission java.io.FilePermission "log${/}-", "read, write";
    permission java.io.FilePermission "node-storage", "read, write, delete";
    permission java.io.FilePermission "node-storage${/}-", "read, write, delete";

    // las2peer network permissions
    // allow local ports from 8000 to 9999 to be used as server ports
    permission java.net.SocketPermission "localhost:8000-9999", "listen";
    // the following portrange is reserved for JUnit tests
    permission java.net.SocketPermission "localhost:14500-14599", "listen";
    // allow connections to any remote host
    permission java.net.SocketPermission "*", "connect,accept";
};

// Linux system file permissions
grant {
    permission java.io.FilePermission "/dev/random", "read";
    permission java.io.FilePermission "/dev/urandom", "read";
};

// pastry permissions
grant {
    permission java.io.FilePermission "${java.io.tmpdir}", "read";
    permission java.io.FilePermission "user.params", "read";
};

// If you don't care about your system or use a closed (debugging) environment,
// you can disable sandboxing checks by uncommenting the following lines.
// THIS IS USUALLY A VERY BAD IDEA AND DISABLES ALL OTHER RULES!!!!
//grant {
//    permission java.security.AllPermission;
//};
